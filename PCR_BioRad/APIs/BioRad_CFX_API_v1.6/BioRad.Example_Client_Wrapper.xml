<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BioRad.Example_Client_Wrapper</name>
    </assembly>
    <members>
        <member name="T:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper">
            <summary>
            Copyright Â©2014 Bio-Rad Laboratories, Inc. All rights reserved.
            
            This class is part of the CFX Manager API Examples kit. 
            
            This class implements a high-level client interface to the CFX Manager API suitable for consumption by
            application-level logic. 
            
            It references the CFXManagerClient class to communicate with CXF Manager service API, and implements private
            logic to encapsulate various low-level details, such as client registration management, XML encoding and decoding, 
            and connectivity management. Presents API operations to consumers as parameterized methods which return 
            simplified instrument status records. Wraps server-side errors and client exceptions in an error event.
            </summary>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.m_lock_object">
            Used to lock critical sections <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.m_registrationID">
            <remarks>
             The registration ID associated with the client session. The service uses the ID to guarantee 
             that only one client is able to interface with the API service at a time. The ID is a required 
             parameter to all non-registration service requests. This class manages the registration process 
             and the registration ID internally, hiding the details from the consumer application.
             </remarks>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.m_MasterMessage">
            <remarks>
            The MessageType runtime object used to send requests to the client. It is re-used/re-populated
            for each service request. MessageType is the XML structure used to specify requests to the 
            CFX Manager API service. MessageType includes an item field which contains the request type being 
            sent, where the request type corresponds to one of the CFX Manage API requests supported by the schema. 
            The different request type runtime object member variables defined in the remainder of this region 
            correspond to each of the supported API requests. At request time, a given request runtime object is 
            populated with appropriate member data and attached to m_MasterMessage in order to create the runtime 
            object representation of the request. m_MasterMessage is then serialized and forwarded to the client 
            for transmission of the request to the service. The schema runtime objects used to implement this 
            framework have been generated from the API schema using the Microsoft XML Schema Definition Tool 
            (Xsd.exe), and are defined in the source file CfxComSchema.cs. 
            </remarks>
        </member>
        <member name="T:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatusValue">
            <summary>
            String representations of CFX system status values as defined in the schema by 
            the StatusType enumeration. 
            </summary>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatusValue.Idle">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatusValue.Paused">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatusValue.Running">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatusValue.InfiniteHold">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatusValue.Synchronizing">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatusValue.Calibrating">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatusValue.LidOpen">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatusValue.Initializing">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatusValue.WaitingManualStart">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatusValue.Processing">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatusValue.Preserving">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatusValue.Error">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatusValue.LocalRun">
            <remarks/>
        </member>
        <member name="T:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.MotorizedLidPosition">
            <summary>
            String representations of CFX motorized lid position values as enumerated in the schema. These
            are used in constructing the simplified status objects that this class provides to the consumer
            application.
            </summary>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.MotorizedLidPosition.OPEN">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.MotorizedLidPosition.CLOSED">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.MotorizedLidPosition.OPENING">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.MotorizedLidPosition.CLOSING">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.MotorizedLidPosition.UNKNOWN">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.MotorizedLidPosition.MANUAL">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.MotorizedLidPosition.NONE">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.MotorizedLidPosition.STOP">
            <remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.MotorizedLidPosition.ERROR">
            <remarks/>
        </member>
        <member name="T:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ErrorRecord">
            <summary>
            A simplified error record, replacing the current and invariant culture description fields found in the
            schema defined ErrorType class, which are designed to be used to assist localization, with a simple 
            description field. Objects of this class are used to convey error information to the consumer application.
            </summary>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ErrorRecord.c_ExceptionCode">
            The value of Code when the error was generated by an exception<remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ErrorRecord.c_NoCode">
            The value of Code when the error has no associated code<remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ErrorRecord.c_ServiceAPISource">
            The value of Source when the error was reported by the service API<remarks/>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ErrorRecord.#ctor(ErrorType,System.String)">
            <summary>
            Create a new ErrorRecord from an ErrorType runtime object
            </summary>
            <param name="schema_error_type">An ErrorType runtime object</param>
            <param name="source">A description of thesource of the serror (optional)</param>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ErrorRecord.#ctor(System.Exception,System.String)">
            <summary>
            Create a new ErrorRecord from an exception
            </summary>
            <param name="ex">An exception</param>
              /// <param name="source">The name of the method that caught the exception</param>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ErrorRecord.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Create a new ErrorRecord from scratch
            </summary>
            <param name="errorCode">An error code convertible to HEX. Usually ErrorRecord.c_NoCode</param>
            <param name="description">A description of the error</param>
            <param name="source">The source method of the error (Optional)</param>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ErrorRecord.Time">
            The datetime of the reported error<remarks/>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ErrorRecord.Code">
            <remarks>
            The error code, dependent on the source of the error. For unanticipated Exceptions will this be
            "Unanticiapted Exception". For CFX system errors, it will be the associated instrument error code.
            </remarks>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ErrorRecord.Description">
            A description of the error as reported by the source<remarks/>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ErrorRecord.Source">
            <remarks>
            When an exception generated the error, the name of the method that caught the exception
             </remarks>
        </member>
        <member name="T:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatus">
            <summary>
            Wraps the InstrumentBlockType schema class into a status record containing the informational
            components required by a typical appication layer
            </summary>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatus.#ctor(InstrumentBlockType)">
            <summary>
            Create a new InstrumentStatus structure from an InstrumentBlockType runtime object. If the status contains
            an error report, it will be assigned to the CurrentError accessor, which will otherwise be null.
            </summary>
            <param name="instrument_block_type">An InstrumentBlockType runtime object</param>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatus.CurrentError">
            The error currently being reported by the instrument, or null if no error is being reported// <remarks/>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatus.BaseSerialNumber">
            The serial number of the CFX system base<remarks/>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatus.BaseName">
            The name (if any) assigned to CFX system base<remarks/>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatus.BlockType">
            The type of optical reaction block (e.g., CFX96, CFX384..)<remarks/>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatus.Status">
            The currently reported instrument status<remarks/>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatus.MototrizedLidPosition">
            The currently reported position of the motorized lid (or "Manual" if the lid is not motorized)<remarks/>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatus.ProtocolStep">
            The currently running protocol step, in the form "x of y" where x is the current step and y is the total number of steps<remarks/>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatus.RepeatStep">
            The current step within the current repeat cycle, in the form "x of y" where x is the current repeat step and y is the total number of repeat steps<remarks/>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatus.EstimatedTimeRemaining">
            The estimated time remaining in the currently running protocol, as hh:mm:ss<remarks/>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatus.LidTemp">
            The instrument lid temperature, in degrees Celsius<remarks/>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.InstrumentStatus.SampleTemp">
            The sample temperature, in degrees Celsius<remarks/>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.Message2XML(MessageType)">
            <summary>
            Generate a serialized XML request from the specified MessageType runtime object. 
            This method is used to encode the runtime MessageType object into serialized 
            XML for transmission to the service by the client. Note that empty string values
            in the runtime object must be the empty string, and not null, or the correspondimg
            element will be omitted from the generated xml, violating the schema.
            </summary>
            <param name="message_type_object">MessageType runtime object</param>
            <returns>Serialized XML representation of the specified MessageType object</returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.XML2BlocksType(System.String)">
            <summary>
            Create an InstrumentBlocksType object from the given XML response received from the API service.
            InstrumentBlocksType is the top-level XML structure used to specify responses from the CFX Manager 
            API service. This method encodes the given serialized XML response into an InstrumentBlocksType 
            runtime object for conversion into a schema wrapper status object for further processing by the
            InstrumentBlocksType2InstrumentStatusList() method defined below.
            </summary>
            <param name="xml_response">Serialized XML service response</param>
            <returns>InstrumentBlocksType runtime object representation of the specified response</returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.BlocksType2StatusList(InstrumentBlocksType)">
            <summary>
            Convert the specified InstrumentBlocksType runtime object into a list of InstrumentStatus objects for
            use by the consumer application. Also checks the InstrumentBlocksType for errors reported by the 
            service (Not to be confused with errors reported by instruments via the service!)The service will report 
            errors if it is unable to complete a request normally. Such errors will be extremely rare in a production 
            environment. and generally indicate an unrecoverable system context requiring rebooting of the hosting computer 
            and/or all connected instruments.
            </summary>
            <param name="instrument_blocks_type"></param>
            <returns></returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.Register">
            <summary>
            Register the underlying client with the CFX Manager API service. Called by the consumer facing OpenClient()
            method to register the underlying client with the service once the connection is established.
            
            The registration ID aquired by this request is required by all other service requests. This class hides the 
            registration ID and its associated role in service transactions from consuming applications. 
            
            Wraps CFXManagerClient:SendServiceRequest() in the local exception handling framework 
            </summary>
            <returns>true IFF no exceptions occurred during the operation</returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.Unregister">
            <summary>
            Unregister the underlying client with CFX Manager API service. Called by the consumer facing CloseClient()
            method. It is important that the client unregister with the service before closing since the service uses
            the registration to enforce its single client policy.
            
            Wraps CFXManagerClient:SendServiceRequest() in the local exception handling framework 
            </summary>
            <returns>true IFF no exceptions occurred during the operation</returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.OpenClient">
            <summary>
            Create a client and register with the CFX Manager API service. Wraps CFXManagerClient:CreateClient() 
            in the local exception handling framework 
            </summary>
            <returns>true IFF the client has been created connected to the API service</returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ClientIsConnected">
            <summary>
            Ping method to verify an open and active service channel is currently established between 
            the client and the service. 
             
            Wraps CFXManagerClient:IsConnected() in the local exception handling framework 
            </summary>
            <returns>true IFF the client is open and connected to the API service</returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.CloseClient">
             <summary>
            Close the client. Must be called by the consumer application prior to exiting to ensure that the client
            unregisters from the service, and that all client related resources are freed. Failure to call this
            method will at the very least prevent any future client connections from being established with the API
            service during the current CFX Manager session.
            
            Wraps CFXManagerClient:CloseClient() in the local exception handling framework 
             </summary>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.GetInstrumentStatus">
            <summary>
            Returns an InstrumentBlocksType runtime object containing the CFX system status of all connected instruments,
            along with any associated service or instrument error reports. 
            </summary>
            <returns>List of InstrumentStatus objects containing the statuses of all connected CFX systems.</returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.OpenLid(System.String)">
            <summary>
            Open the mechanized lid of the specified CFX system.
            </summary>
            <param name="serialNumber">Serial number of CFX system base</param>
            <returns>List of InstrumentStatus objects containing just the status of the target instrument</returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.CloseLid(System.String)">
            <summary>
            Close the mechanized lid of the specified CFX system.
            </summary>
            <param name="serialNumber">Serial number of CFX system base</param>
            <returns>List of InstrumentStatus objects containing just the status of the target instrument</returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.Blink(System.String)">
             <summary>
            Cause the LED on the lid of the specified CFX system to blink for approximately five seconds. 
             </summary>
             <param name="serialNumber">Serial number of CFX system base</param>
             <returns>List of InstrumentStatus objects containing just the status of the target instrument</returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.RunProtocol(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Start a protocol run using the given parameters on the specified CFX system. 
            </summary>
            <param name="serialNumber">
            Serial number of CFX system base
            </param>
            <param name="protocolFile">
            Fully qualified protocol, LIMS, or PrimePCR file name
            </param>
            <param name="plateFile">
            Full path to plate file if protocolFile is a real-time protocol(.pcrd) file.
            Null if protocolFile is a conventional protocol, a LIMS(.csv) file, or PrimePCR(.plrn) file.
            </param>
            <param name="runNote">
            Text to appear as Notes in the report file
            </param>
            <param name="runID">
            Text to appear as Run ID, (typically a plate barcode), in the report file
            </param>
            <param name="DataFileName">
            Fully qualified file name of the data file to be created, or empty to use CFX manager default settings
            </param>
            <param name="LockInstrumentPanel">
            Locking the instrument front panel during the run? True to lock
            </param>
            <param name="GenerateReport">
            Generate report after the run? True to generate report
            </param>
            <param name="ReportTemplate">
            Full path to report template file to be used to create reports or empty to use default template
            </param>
            <param name="ReportFileName">
            Fully qualified file name of the data file to be created, or empty to use CFX manager default settings
            </param>
            <param name="EmailAddresses">
            Comma seperated Email addresses to send data files and reports to at run completion.
            </param>
            <returns>
            InstrumentBlocksType runtime object containing the status of the target instrument and any errors that occurred during the operation
            </returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.StopRun(System.String)">
             <summary>
            Cancel a currently running protocol on the specified CFX system
             </summary>
             <param name="serialNumber">Serial number of CFX system base</param>
             <returns>List of InstrumentStatus objects containing just the status of the target instrument</returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.PauseRun(System.String)">
             <summary>
            Pause a currently running protocol on the specified CFX system
             </summary>
             <param name="serialNumber">Serial number of CFX system base</param>
             <returns>List of InstrumentStatus objects containing just the status of the target instrument</returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ResumeRun(System.String)">
             <summary>
            Resume a paused protocol on the specified CFX system
             </summary>
             <param name="serialNumber">Serial number of CFX system base</param>
             <returns>List of InstrumentStatus objects containing just the status of the target instrument</returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.GenerateReport(System.String,System.String,System.String)">
            <summary>
            Generate PDF report from the specified data file
            </summary>
            <param name="dataFile">The data file from which to generate the report</param>
            <param name="templateFile">The report template file to be use to generate the report</param>
            <param name="outputFile">
            Fully qualified file name of the report file will be written.
            If empty or null then the name of the data file will be used with the filename extention replaced according to the report file type.
            </param>
            <list type="">
            <item>Portable data format ("PDF").</item>
            <item>Mime-type HTML ("mHTML").</item>
            <item>Plain Text ("text").</item>
            </list>
            <returns>List of InstrumentStatus objects containing the status of all connected instruments</returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ShutDown">
            <summary>
            Shutdown the CFX Manager application hosting the service. This should be used by consumer applications to
            shut-down server mode (no UI) instances of the CFX Manager application which they have explcitly started.
            If this command is not used to shut down such instances (the application is shut-down by simply killing 
            the process, for example) then there is a high likelyhood that certain associated independent processes 
            will remain running and prevent any further normal operation of CFX Manager until host system reboot.
            </summary>
        </member>
        <member name="E:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ClientError">
            <summary>
            Any errors or exceptions generated in this class, or generated in the CFXManagerClient class, will be
            reported to the consuming application via this event. 
            </summary>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.OnClientError(BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ClientErrorEventArgs)">
            <summary>
             The ClientError Event Handler
            </summary>
        </member>
        <member name="T:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ClientErrorEventArgs">
            <summary>
            ClientError event arguments. 
            
            Low level error handling (handling of client errors, reported service errors, or unanticipated exceptions occurring
            in the wrapper layer) consists of reporting the detected error or exception to the consumer application via an event. 
            These arguments are designed to provide basic "what and where" information to the consuming application for reporting 
            purposes. In any given production environment, it might or might not make sense to perform specialized processing of 
            certain anticipated client errors, such as service time-outs, within this class, rather than forwarding them to the consumer.
            </summary>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ClientErrorEventArgs.#ctor(BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ErrorRecord)">
            <summary>
             Contructor 
            </summary>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerClientWrapper.ClientErrorEventArgs.ErrorReport">
            <summary>   
            ErrorRecord instance describing the error. 
            </summary>
        </member>
        <member name="T:BioRad.Example_Client_Wrapper.CFXManagerUtilities">
            <summary>
            Copyright Â©2014 Bio-Rad Laboratories, Inc. All rights reserved.
            
            This class is part of the CFX Manager API Examples kit. 
            
            Implements CFX Manager related utilities used by the example application. Provides the locations
            of certains standard CFX Manager directories, defines the minimum API compatible version of
            CFX Manager, and provides utilities to determine whether CFX Manager is installed and/or running,
            and to start and shutdown an instance of CFX Manager in server mode (No UI mode).  
            </summary>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerUtilities.c_BioRadDirectory">
            Root Bio-Rad directory name<Remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerUtilities.c_CFXManagerExecutableFile">
            CFXManager executable file name<Remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerUtilities.c_Min_CFXManager_Version">
            The minumum CFX Manager product version compatible with the published API<Remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerUtilities.c_CFXManagerExpressLoadDirectory">
            The name of the CFX Manager Express Load Directory<Remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerUtilities.c_CFXManagerUserAdmin">
            The relative path to the CFX Manager admin user directory<Remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerUtilities.m_CFXManagerExecutablePath">
            The absolute path to the directory containing the CFX Manager executable<Remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerUtilities.m_CFXManagerExecutable">
            The name of the CFX Manager executable file<Remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerUtilities.m_CFXManagerDataPathBioRadRoot">
            The root of the Bio-Rad specific program data directory<Remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerUtilities.m_CompatibleCFXManagerIsInstalled">
            Flag tracking whether an API compatible version of CFX Manager is installed on the host system<Remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerUtilities.m_CFXManagerVersion">
            The version information corresponding to the highest installed version of CFX Manager<Remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerUtilities.m_CFXManagerFileVersionInfo">
            The file version of the highest installed version of CFX Manager<Remarks/>
        </member>
        <member name="F:BioRad.Example_Client_Wrapper.CFXManagerUtilities.m_executing_cfx_manager_process">
            The executing CFX Manager master processs, when CFX Manager has been started in server mode by this class.<Remarks/>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerUtilities.#cctor">
            <summary>
            Static constructor. 
            Initializes information related to the installed version of CFX Manager by calling InitializeCFXManagerUtilities().
            </summary>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerUtilities.InitializeCFXManagerUtilities">
            <summary>
            Initializes the CFXManagerUtilities class by obtaining all pertinent information related the first found installed
            CFX Manager that meets the minimum version information hardcoded in c_Min_CFXManager_Version, which is the minumum
            version compatible with the CFX Manager API service.
            </summary>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerUtilities.HighestInstalledCfXManagerVersion">
            <summary>
            Gets the FileVersionInfo of the highest CFX Manager version installed in the standard Bio-Rad root directory.
            Called once by InitializeCFXManagerUtilities() during construction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerUtilities.FileSearch(System.String,System.IO.DirectoryInfo)">
            <summary>
            Search the specified directories for the specified file name. Return a list of version information
            for each instance found. Called by HighestInstalledCfXManagerVersion() once during construction.
            </summary>
            <param name="searchFilename"></param>
            <param name="di"></param>
            <returns></returns>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerUtilities.MiniumumCFXManagerVersion">
             <summary>
            The minumum CFX Manager product version compatible with the published API service
             </summary>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerUtilities.APICompatibleCFXManagerIsInstalled">
            <summary>
            True IFF a version of CFX Manager compatible with the published API service is
            installed on the host computer. If this is not true, all utility methods in this 
            class will be rendered non-functional.
            </summary>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerUtilities.CFXManagerIsExecuting">
            <summary>
            True IFF an API compatible version of CFX Manager is currently executing
            </summary>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerUtilities.CFXManagerWasStartedByApp">
            <summary>
            True IFF an API service compatible version of CFX Manager that was started in server (no UI) 
            mode using these utilities is currently executing. (if CFXManagerIsExecuting is true and this is
            false, than an externally started (UI active) instance of CFXManager is executing).
            </summary>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerUtilities.CFXManagerCommonDocuments">
            <summary>
            Returns The CFXManager-specific CommonDocuments path
            </summary>
            <returns></returns>
        </member>
        <member name="P:BioRad.Example_Client_Wrapper.CFXManagerUtilities.CFXManagerUserAdminDirectory">
            <summary>
            Returns The CFXManager [CommonDocuments]/Users/admin folder which is used as the default application 
            document location by CFX Manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerUtilities.StartCFXManagerAsServer">
            <summary>
            Launch CFX Manager in server mode IFF an API compatible version is installed and is 
            not currently executing. Note that this method will wait to return until the started   
            CFX Manager process has completed initialization, which may take several seconds.
            </summary>
            <returns>True IFF CFX Manager was successfully started</returns>
        </member>
        <member name="M:BioRad.Example_Client_Wrapper.CFXManagerUtilities.StopCFXManager">
            <summary>
            Kill the started CFX Manager process, and its associated sub-processes. This functionality is required by the
            consumer application in the event that CFX Manager is started by this class, but the consumer application
            is unable to connect to the API service. When the service is available, the API shutdown command should be 
            used to stop CFX Manager. 
            </summary>
        </member>
    </members>
</doc>
